//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.6
//
// <auto-generated>
//
// Generated from file `VotacionXYZ.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package VotacionXYZ;

public class DatosMesa implements java.lang.Cloneable,
                                  java.io.Serializable
{
    public Ciudadano[] ciudadanos;

    public Candidato[] candidatos;

    public DatosMesa()
    {
    }

    public DatosMesa(Ciudadano[] ciudadanos, Candidato[] candidatos)
    {
        this.ciudadanos = ciudadanos;
        this.candidatos = candidatos;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        DatosMesa r = null;
        if(rhs instanceof DatosMesa)
        {
            r = (DatosMesa)rhs;
        }

        if(r != null)
        {
            if(!java.util.Arrays.equals(this.ciudadanos, r.ciudadanos))
            {
                return false;
            }
            if(!java.util.Arrays.equals(this.candidatos, r.candidatos))
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::VotacionXYZ::DatosMesa");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, ciudadanos);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, candidatos);
        return h_;
    }

    public DatosMesa clone()
    {
        DatosMesa c = null;
        try
        {
            c = (DatosMesa)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        CiudadanoSeqHelper.write(ostr, this.ciudadanos);
        CandidatoSeqHelper.write(ostr, this.candidatos);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.ciudadanos = CiudadanoSeqHelper.read(istr);
        this.candidatos = CandidatoSeqHelper.read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, DatosMesa v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public DatosMesa ice_read(com.zeroc.Ice.InputStream istr)
    {
        DatosMesa v = new DatosMesa();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<DatosMesa> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, DatosMesa v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<DatosMesa> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(DatosMesa.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final DatosMesa _nullMarshalValue = new DatosMesa();

    /** @hidden */
    public static final long serialVersionUID = 4827559310784354977L;
}
